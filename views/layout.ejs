<!DOCTYPE html>
<html>
  <head>
    <title>Xokotetl</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta charset="utf-8">
    <link rel="icon" type="image/png" href="/images/hotel-logo.png" />
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/myStyle.css">
    <!--STYLES END-->
    <link rel="stylesheet" href="/templates/semantic-ui/dist/semantic.min.css">
  </head>

  <body>
    <header>
      <a href='/'><img src="/images/hotel-logo.png" alt="logo" id='logoImg'></a>
      <nav>
        <div class="ui secondary pointing menu">
          <a href="" class='ui item active'>Inicio</a>
          <a href="" class='ui item'>Servicios</a>
          <a href="" class='ui item'>Eventos</a>
          <a href="" class='ui item'>Ofertas y paquetes</a>
          <a href="" class='ui item'>Atractivos tur√≠sticos</a>
          <a href="" class='ui item'>Acerca de nosotros</a>
          <a href="" class='ui item'>Nuestros clientes</a>
          <a href="" class='ui item'>Comentarios</a>
          <a href="" class='ui item'>Contacto</a>
          <div class="right menu">
            <!-- <a class="ui item">Log in</a> -->
          </div>
        </div>
      </nav>
    </header>
    <%- body %>

    <footer>

    </footer>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/js/jquery-3.2.1.min.js"></script>
    <!--SCRIPTS END-->
    <script src='/templates/semantic-ui/dist/semantic.min.js'></script>
    <script>
      $('a.item').on('click',(ev)=>{
        $('a.item.active').removeClass('active');
        $(ev.target).addClass('active');

      });
      // $('#logoImg').on('click',(ev)=>{
      //   $('#logoImg').transition('fade');
      //   console.log('trans');
      // });
    </script>
  </body>
</html>
